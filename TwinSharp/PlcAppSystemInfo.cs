using TwinCAT.Ads;

namespace TwinSharp
{
    public class PlcAppSystemInfo
    {
        readonly AdsClient client;
        internal PlcAppSystemInfo(AdsClient client)
        {
            this.client = client;
        }


        /// <summary>
        /// Object ID of the PLC project instance.
        /// </summary>
        public ulong ObjId
        {
            get => client.ReadULong("TwinCAT_SystemInfoVarList._AppInfo.ObjId");
        }

        /// <summary>
        /// TwinCAT internal use.
        /// </summary>
        public uint Flags
        {
            get => client.ReadUInt("TwinCAT_SystemInfoVarList._AppInfo.Flags");
        }

        /// <summary>
        /// ADS port of the PLC application.
        /// </summary>
        public uint AdsPort
        {
            get => client.ReadUInt("TwinCAT_SystemInfoVarList._AppInfo.AdsPort");
        }

        /// <summary>
        /// PERSISTENT variables: LOADED (without error).
        /// </summary>
        public bool BootDataLoaded
        {
            get => client.ReadBool("TwinCAT_SystemInfoVarList._AppInfo.BootDataLoaded");
        }

        /// <summary>
        /// PERSISTENT variables: INVALID (the back-up copy was loaded, since no valid file was present).
        /// </summary>
        public bool OldBootData
        {
            get => client.ReadBool("TwinCAT_SystemInfoVarList._AppInfo.OldBootData");
        }

        /// <summary>
        /// Time at which the PLC application was compiled
        /// </summary>
        public DateTime AppTimestamp
        {
            get => client.ReadDateTime("TwinCAT_SystemInfoVarList._AppInfo.AppTimestamp");
        }

        /// <summary>
        /// The flag can be set and prevents that the outputs are zeroed when a breakpoint is reached. In this case the task continues to run. Only the execution of the PLC code is interrupted.
        /// </summary>
        public bool KeepOutputsOnBP
        {
            get
            {
                return client.ReadBool("TwinCAT_SystemInfoVarList._AppInfo.KeepOutputsOnBP");
            }
            set
            {
                var handle = client.CreateVariableHandle("TwinCAT_SystemInfoVarList._AppInfo.KeepOutputsOnBP");
                client.WriteAny(handle, value);
            }
        }

        /// <summary>
        /// This variable has the value TRUE if a shutdown of the TwinCAT system is in progress. Some parts of the TwinCAT system may already have been shut down.
        /// </summary>
        public bool ShutdownInProgress
        {
            get => client.ReadBool("TwinCAT_SystemInfoVarList._AppInfo.ShutdownInProgress");
        }

        /// <summary>
        /// This variable has the value TRUE if not all licenses that are provided by license dongles have been validated yet.
        /// </summary>
        public bool LicensesPending
        {
            get => client.ReadBool("TwinCAT_SystemInfoVarList._AppInfo.LicensesPending");
        }

        /// <summary>
        /// This variable has the value TRUE if Windows is in a BSOD. 
        /// </summary>
        public bool BSODOccured
        {
            get => client.ReadBool("TwinCAT_SystemInfoVarList._AppInfo.BSODOccured");
        }

        
        /// <summary>
        /// Number of tasks in the runtime system
        /// </summary>
        public ulong TaskCnt
        {
            get => client.ReadULong("TwinCAT_SystemInfoVarList._AppInfo.TaskCnt");
        }

        /// <summary>
        /// Number of online changes since the last complete download
        /// </summary>
        public ulong OnlineChangeCnt
        {
            get => client.ReadULong("TwinCAT_SystemInfoVarList._AppInfo.OnlineChangeCnt");
        }


        /// <summary>
        /// Name generated by TwinCAT, which contains the port.
        /// </summary>
        public string AppName
        {
            get => client.ReadString("TwinCAT_SystemInfoVarList._AppInfo.AppName", 63);
        }

        /// <summary>
        /// Name of the project.
        /// </summary>
        public string ProjectName
        {
            get => client.ReadString("TwinCAT_SystemInfoVarList._AppInfo.ProjectName", 63);
        }
    }
}
